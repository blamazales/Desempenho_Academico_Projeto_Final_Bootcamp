# -*- coding: utf-8 -*-
"""Desafio Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_2bF8olt46LLVl40ZPtO85sYpZwtT9d1

# **Desafio de An√°lise de Dados: "O que influencia o desempenho acad√™mico dos estudantes?"**


**Contexto**: Voc√™ √© uma cientista de dados contratada por uma universidade interessada em entender quais fatores do cotidiano dos alunos est√£o mais relacionados ao desempenho nas provas finais. A institui√ß√£o deseja usar esses insights para desenvolver pol√≠ticas de apoio estudantil.

# 1. An√°lise Explorat√≥ria dos Dados (EDA)

### a) Qual a distribui√ß√£o de notas (exam_score) entre os alunos?
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/student_habits_performance.csv')

df.head()

print(df['exam_score'].describe())

plt.figure(figsize=(10, 6))
sns.histplot(df['exam_score'], kde=True, bins=20)
plt.title('Distribui√ß√£o das notas (exam_score)')
plt.xlabel('Nota do Exame')
plt.ylabel('Frequ√™ncia')
plt.grid(True)
plt.show()

"""### b) H√° diferen√ßa de desempenho entre g√™neros?"""

plt.figure(figsize=(8, 6))
sns.boxplot(x='gender', y='exam_score', data=df, palette='pastel')
plt.title('Distribui√ß√£o das Notas por G√™nero')
plt.xlabel('G√™nero')
plt.ylabel('Nota no Exame')
plt.grid(True)
plt.show()

df.groupby('gender')['exam_score'].agg(['mean', 'std', 'count'])

"""### c) Existe correla√ß√£o entre horas de estudo e nota final? E entre horas em redes sociais/Netflix e nota?

"""

correlacoes = df[['study_hours_per_day', 'social_media_hours', 'netflix_hours', 'exam_score']].corr()
print(correlacoes['exam_score'].sort_values(ascending=False))

sns.scatterplot(x='study_hours_per_day', y='exam_score', data=df)
plt.title('Horas de Estudo vs Nota no Exame')
plt.xlabel('Horas de Estudo por Dia')
plt.ylabel('Nota no Exame')
plt.grid(True)
plt.show()

sns.scatterplot(x='social_media_hours', y='exam_score', data=df)
plt.title('Horas em Redes Sociais vs Nota no Exame')
plt.xlabel('Horas em Redes Sociais por Dia')
plt.ylabel('Nota no Exame')
plt.grid(True)
plt.show()

sns.scatterplot(x='netflix_hours', y='exam_score', data=df)
plt.title('Horas Assistindo Netflix vs Nota no Exame')
plt.xlabel('Horas de Netflix por Dia')
plt.ylabel('Nota no Exame')
plt.grid(True)
plt.show()

# Tamanho da figura e estilo
plt.figure(figsize=(18, 5))  # Largura, altura

# 1. Horas de Estudo vs Nota
plt.subplot(1, 3, 1)
sns.scatterplot(x='study_hours_per_day', y='exam_score', data=df)
plt.title('Horas de Estudo vs Nota')
plt.xlabel('Horas de Estudo por Dia')
plt.ylabel('Nota no Exame')
plt.grid(True)

# 2. Redes Sociais vs Nota
plt.subplot(1, 3, 2)
sns.scatterplot(x='social_media_hours', y='exam_score', data=df)
plt.title('Redes Sociais vs Nota')
plt.xlabel('Horas em Redes Sociais')
plt.ylabel('')
plt.grid(True)

# 3. Netflix vs Nota
plt.subplot(1, 3, 3)
sns.scatterplot(x='netflix_hours', y='exam_score', data=df)
plt.title('Netflix vs Nota')
plt.xlabel('Horas Assistindo Netflix')
plt.ylabel('')
plt.grid(True)

# Exibir os tr√™s gr√°ficos juntos
plt.tight_layout()
plt.show()

"""1. Correla√ß√£o entre study_hours_per_day e exam_score: 0.825
For√ßa da correla√ß√£o: Muito forte (acima de 0.8).

Sinal: Positivo ‚Üí quanto mais horas o aluno estuda por dia, maior tende a ser sua nota no exame.

Interpreta√ß√£o: Existe uma forte rela√ß√£o positiva entre o tempo dedicado ao estudo e o desempenho. Isso sugere que estudar mais est√° fortemente associado a melhores notas.

2. Correla√ß√£o entre social_media_hours e exam_score: -0.166
For√ßa da correla√ß√£o: Fraca.

Sinal: Negativo ‚Üí quanto mais tempo gasto em redes sociais, ligeiramente menor tende a ser a nota.

Interpreta√ß√£o: H√° uma fraca rela√ß√£o negativa, o que indica que passar mais tempo em redes sociais pode estar modestamente associado a notas um pouco mais baixas, mas o efeito n√£o √© muito forte.

3. Correla√ß√£o entre netflix_hours e exam_score: -0.172
For√ßa da correla√ß√£o: Fraca.

Sinal: Negativo.

Interpreta√ß√£o: Assim como redes sociais, h√° uma fraca correla√ß√£o negativa ‚Äî ou seja, assistir mais Netflix pode estar levemente relacionado a piores notas, mas o impacto n√£o √© expressivo por si s√≥.

### d) Como a vari√°vel sa√∫de mental est√° impactando a nota final dos alunos.
"""

correlacao = df['mental_health_rating'].corr(df['exam_score'])
print(f"Correla√ß√£o entre sa√∫de mental e nota final: {correlacao:.2f}")

df.groupby('mental_health_rating')['exam_score'].mean().plot(kind='bar', figsize=(8,5), color='skyblue')
plt.title('Nota M√©dia por Avalia√ß√£o de Sa√∫de Mental')
plt.xlabel('Avalia√ß√£o de Sa√∫de Mental')
plt.ylabel('Nota M√©dia no Exame')
plt.grid(axis='y')
plt.show()

"""# 2. Investiga√ß√£o de Correla√ß√µes e Tend√™ncias

### a) Quais h√°bitos t√™m maior correla√ß√£o com alto desempenho (nota ‚â• 85)?
"""

df.columns

# 3. Criar coluna de alto desempenho (nota >= 85)
df['Alto_Desempenho'] = df['exam_score'] >= 85

# 4. Converter coluna booleana para inteiro (True = 1, False = 0)
df['Alto_Desempenho'] = df['Alto_Desempenho'].astype(int)

# 5. Selecionar apenas colunas num√©ricas (excluindo 'Nota' se necess√°rio)
colunas_numericas = df.select_dtypes(include=['int64', 'float64']).drop(columns=['exam_score'], errors='ignore')

# 6. Calcular correla√ß√£o com alto desempenho
correlacoes = colunas_numericas.corr()['Alto_Desempenho'].drop('Alto_Desempenho').sort_values(ascending=False)

# 7. Exibir as correla√ß√µes
print("\nüß† Correla√ß√£o dos h√°bitos com alto desempenho (‚â• 85):\n")
print(correlacoes)

# 8. Visualiza√ß√£o com gr√°fico de barras
plt.figure(figsize=(10, 6))
sns.barplot(x=correlacoes.values, y=correlacoes.index, palette='coolwarm')
plt.title('Correla√ß√£o dos H√°bitos com Alto Desempenho (Nota ‚â• 85)')
plt.xlabel('Coeficiente de Correla√ß√£o')
plt.tight_layout()
plt.show()

"""### b) Como o n√≠vel de educa√ß√£o dos pais influencia a nota?"""

import matplotlib.pyplot as plt
from scipy.stats import f_oneway
# Verificar os valores √∫nicos da coluna (ajuste o nome conforme necess√°rio)
print("N√≠veis de educa√ß√£o dos pais:")
print(df['parental_education_level'].unique())

# Agrupar pela escolaridade dos pais e calcular m√©dia da nota
media_por_educacao = df.groupby('parental_education_level')['exam_score'].mean().sort_values(ascending=False)

print("\nüìä M√©dia de notas por n√≠vel de escolaridade dos pais:\n")
print(media_por_educacao)

# Gr√°fico de barras
plt.figure(figsize=(10, 6))
sns.barplot(x=media_por_educacao.values, y=media_por_educacao.index, palette='viridis')
plt.xlabel('M√©dia da Nota')
plt.ylabel('N√≠vel de Educa√ß√£o dos Pais')
plt.title('Influ√™ncia da Escolaridade dos Pais na Nota')
plt.tight_layout()
plt.show()

# Teste ANOVA - diferen√ßa significativa entre os grupos?
grupos = [grupo['exam_score'].values for nome, grupo in df.groupby('parental_education_level')]
anova = f_oneway(*grupos)
print(f"\nüìà Resultado do teste ANOVA: p-valor = {anova.pvalue:.4f}")
if anova.pvalue < 0.05:
    print("‚Üí Diferen√ßas significativas entre os grupos de escolaridade dos pais.")
else:
    print("‚Üí N√£o h√° diferen√ßas estatisticamente significativas entre os grupos.")

df['parental_education_level'].value_counts()

df.groupby('parental_education_level')['exam_score'].mean().sort_values(ascending=False)

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(10,6))
sns.barplot(x='parental_education_level', y='exam_score', data=df, ci=None, order=df['parental_education_level'].value_counts().index)
plt.title('Nota M√©dia por N√≠vel de Educa√ß√£o dos Pais')
plt.xlabel('N√≠vel de Educa√ß√£o dos Pais')
plt.ylabel('Nota M√©dia no Exame')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""### c) Alunos com empregos de meio per√≠odo t√™m desempenho diferente?"""

df.columns

# Verificar os valores √∫nicos
print("Valores poss√≠veis:", df['part_time_job'].unique())

#  Calcular m√©dia das notas por grupo
media_por_grupo = df.groupby('part_time_job')['exam_score'].mean()
print("\nM√©dia da Nota por grupo (com/sem emprego):\n", media_por_grupo)

#  Gr√°fico de barras
plt.figure(figsize=(6, 4))
sns.barplot(data=df, x='part_time_job', y='exam_score', palette='Set2')
plt.title('Notas por Situa√ß√£o de Emprego de Meio Per√≠odo')
plt.xlabel('Tem Emprego de Meio Per√≠odo')
plt.ylabel('Nota M√©dia (exam_score)')
plt.tight_layout()
plt.show()

# Teste t de Student
grupo_com_emprego = df[df['part_time_job'] == 'Yes']['exam_score']
grupo_sem_emprego = df[df['part_time_job'] == 'No']['exam_score']
t_stat, p_valor = ttest_ind(grupo_com_emprego, grupo_sem_emprego)

print(f"\nüìä Teste t de Student: p-valor = {p_valor:.4f}")
if p_valor < 0.05:
    print("‚Üí Diferen√ßa significativa nas notas entre quem tem e quem n√£o tem emprego.")
else:
    print("‚Üí N√£o h√° diferen√ßa significativa nas notas entre os grupos.")

df['part_time_job'].value_counts()

df.groupby('part_time_job')['exam_score'].mean()

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(8,6))
sns.boxplot(x='part_time_job', y='exam_score', data=df)
plt.title('Desempenho no Exame x Emprego de Meio Per√≠odo')
plt.xlabel('Emprego de Meio Per√≠odo (0=N√£o, 1=Sim)')
plt.ylabel('Nota no Exame')
plt.grid(True)
plt.show()

from scipy.stats import ttest_ind

grupo_trabalha = df[df['part_time_job'] == 1]['exam_score']
grupo_nao_trabalha = df[df['part_time_job'] == 0]['exam_score']

t_stat, p_value = ttest_ind(grupo_trabalha, grupo_nao_trabalha, equal_var=False)
print(f"T-stat√≠stica = {t_stat:.2f}, p-valor = {p_value:.4f}")

"""O p-valor (0.3946) √© bem maior que 0.05, o que indica que n√£o h√° evid√™ncia estat√≠stica suficiente para afirmar que o desempenho (nota no exame) dos alunos com emprego de meio per√≠odo √© diferente do dos alunos sem emprego.

A t-estat√≠stica negativa sugere que a m√©dia dos alunos que trabalham √© um pouco menor, mas essa diferen√ßa n√£o √© significativa estatisticamente.

alunos com emprego de meio per√≠odo n√£o apresentam diferen√ßa significativa no desempenho acad√™mico em compara√ß√£o com alunos que n√£o trabalham.

# 3. Modelagem Preditiva Construa um modelo de regress√£o para prever a exam_score com base nas demais vari√°veis.
Avalie a import√¢ncia de cada vari√°vel no modelo. Separe em vari√°veis que possuem impacto negativo e positivo no score do exame.
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# ===  Pr√©-processamento ===
# Remover coluna que n√£o contribui para o modelo
df_model = df.drop(columns=["student_id"])

# Codificar vari√°veis categ√≥ricas com get_dummies
df_encoded = pd.get_dummies(df_model, drop_first=True)

# Separar vari√°vel alvo e preditoras
X = df_encoded.drop(columns=["exam_score"])
y = df_encoded["exam_score"]

# ===  Separar em treino e teste ===
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ===  Treinar modelos ===
lr_model = LinearRegression()
rf_model = RandomForestRegressor(random_state=42)

lr_model.fit(X_train, y_train)
rf_model.fit(X_train, y_train)

# ===  Avalia√ß√£o dos modelos ===
y_pred_lr = lr_model.predict(X_test)
y_pred_rf = rf_model.predict(X_test)

r2_lr = r2_score(y_test, y_pred_lr)
r2_rf = r2_score(y_test, y_pred_rf)

print(f"R¬≤ Regress√£o Linear: {r2_lr:.3f}")
print(f"R¬≤ Random Forest: {r2_rf:.3f}")

# === Import√¢ncia das vari√°veis ===

# Regress√£o Linear: coeficientes
coef_lr = pd.Series(lr_model.coef_, index=X.columns).sort_values()
print("\nCoeficientes - Regress√£o Linear:")
print(coef_lr)

# Separar impacto positivo e negativo
coef_positivo = coef_lr[coef_lr > 0]
coef_negativo = coef_lr[coef_lr < 0]

# Random Forest: import√¢ncia
importances_rf = pd.Series(rf_model.feature_importances_, index=X.columns).sort_values(ascending=False)
print("\nTop 10 Import√¢ncias - Random Forest:")
print(importances_rf.head(10))

# ===  Visualiza√ß√£o ===

# Gr√°fico dos coeficientes positivos e negativos
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
coef_positivo.plot(kind='barh', color='green')
plt.title('Impacto Positivo no Exam Score (Reg. Linear)')

plt.subplot(1, 2, 2)
coef_negativo.plot(kind='barh', color='red')
plt.title('Impacto Negativo no Exam Score (Reg. Linear)')
plt.tight_layout()
plt.show()

# Gr√°fico da import√¢ncia das vari√°veis no Random Forest
plt.figure(figsize=(10, 6))
sns.barplot(x=importances_rf.head(10), y=importances_rf.head(10).index, palette='viridis')
plt.title("Top 10 Import√¢ncias - Random Forest")
plt.xlabel("Import√¢ncia")
plt.ylabel("Vari√°vel")
plt.show()

"""# 4. Recomenda√ß√µes Com base nas an√°lises, sugira pelo menos 3 a√ß√µes pr√°ticas que a universidade pode implementar para melhorar o desempenho acad√™mico dos alunos.

**Criar Programas de Acompanhamento e Planejamento de Estudos**

Justificativa: A vari√°vel com maior impacto positivo foi study_hours_per_day, com coeficiente +9.53.

A√ß√£o sugerida:

Implementar mentorias acad√™micas ou grupos de estudo assistidos por monitores.

Oferecer oficinas de planejamento de tempo e t√©cnicas de estudo eficazes.

Criar metas personalizadas de estudo por curso ou mat√©ria.

**Promover H√°bitos de Sono Saud√°veis e Sa√∫de Mental**

Justificativa:

sleep_hours (+1.98) e mental_health_rating (+1.96) influenciam fortemente o desempenho.

A√ß√£o sugerida:

Parcerias com especialistas para oferecer palestras sobre sono, ansiedade e bem-estar.

Disponibilizar sess√µes com psic√≥logos ou terapeutas estudantis.

Criar campanhas educativas sobre higiene do sono e equil√≠brio emocional.

**Educar sobre o Uso Consciente de Redes Sociais e Streaming**

Justificativa:

Horas gastas em social_media_hours (‚àí2.69) e netflix_hours (‚àí2.32) impactam negativamente.

A√ß√£o sugerida:

Campanhas de ‚Äúdetox digital‚Äù e uso consciente de telas.

Oficinas que ajudem os alunos a identificar distra√ß√µes digitais.

Incentivar o uso de apps de foco como Forest, Pomodoro, ou funcionalidades de tempo de tela.

**Estimular mais horas de estudo di√°rias:**

Alunos com mais de X horas/dia tiveram notas significativamente maiores.

Reduzir o tempo gasto em redes sociais/Netflix:

Correla√ß√£o negativa entre tempo em m√≠dias e exam_score.

Oferecer suporte √† sa√∫de mental:

Alunos com boas avalia√ß√µes de sa√∫de mental tiveram melhor desempenho.

Programa de incentivo ao exerc√≠cio f√≠sico:

Frequ√™ncia de exerc√≠cio correlaciona positivamente com nota.
"""